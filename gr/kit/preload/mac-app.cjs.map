{
  "version": 3,
  "sources": ["../src/preload/utils.ts", "../src/preload/api/global.ts", "../src/preload/api/kit.ts", "../src/preload/os/mac.ts", "../src/enums.ts", "../src/preload/target/app.ts"],
  "sourcesContent": ["export let assignPropsTo = (\n  source: { [s: string]: unknown } | ArrayLike<unknown>,\n  target: { [x: string]: unknown }\n) => {\n  Object.entries(source).forEach(([key, value]) => {\n    target[key] = value\n  })\n}\n", "import { LoDashStatic } from \"lodash\"\nimport { Options } from \"trash\"\nimport { assignPropsTo } from \"../utils\"\n\nlet globalApi = {\n  cd: \"shelljs\",\n  cp: \"shelljs\",\n  chmod: \"shelljs\",\n  echo: \"shelljs\",\n  exec: \"shelljs\",\n  exit: \"shelljs\",\n  grep: \"shelljs\",\n  ln: \"shelljs\",\n  ls: \"shelljs\",\n  mkdir: \"shelljs\",\n  mv: \"shelljs\",\n  sed: \"shelljs\",\n  tempdir: \"shelljs\",\n  test: \"shelljs\",\n  which: \"shelljs\",\n  spawn: \"child_process\",\n  spawnSync: \"child_process\",\n  fork: \"child_process\",\n  get: \"axios\",\n  put: \"axios\",\n  post: \"axios\",\n  patch: \"axios\",\n  readFile: \"fs/promises\",\n  writeFile: \"fs/promises\",\n  appendFile: \"fs/promises\",\n  createWriteStream: \"fs\",\n  readdir: \"fs/promises\",\n  compile: \"handlebars\",\n}\n\nglobal.cwd = process.cwd\nglobal.pid = process.pid\nglobal.stderr = process.stderr\nglobal.stdin = process.stdin\nglobal.stdout = process.stdout\nglobal.uptime = process.uptime\n\nObject.entries(globalApi).forEach(([key, value]) => {\n  global[key] = (...args: any) => {\n    return require(value)[key](...args)\n  }\n})\n\nglobal.path = require(\"path\")\n\nglobal._ = new Proxy(\n  {},\n  {\n    get(_o, p) {\n      return require(\"lodash\")[p]\n    },\n  }\n) as LoDashStatic\n\nglobal.uuid = (...args: any) => require(\"uuid\").v4(...args)\nglobal.chalk = (...text: unknown[]) =>\n  require(\"chalk\")(...text)\n\nglobal.paste = (...args: any) =>\n  require(\"clipboardy\").read(...args)\nglobal.copy = (...args: any) =>\n  require(\"clipboardy\").write(...args)\n\nglobal.trash = async (\n  input: string | readonly string[],\n  options?: Options\n) => {\n  ;(typeof input === \"string\" ? [input] : input)\n    .flatMap((x: any) => x)\n    .forEach((trashArg: any) => {\n      echo(\n        global.chalk`{yellow ${trashArg}} moved to {yellow trash}`\n      )\n    })\n  return await require(\"trash\")(input, options)\n}\n\nglobal.rm = async (\n  input: string | readonly string[],\n  options?: Options\n) => {\n  echo(\n    global.chalk`{yellow rm} doesn't exist. You're probably looking for {yellow trash}`\n  )\n  await global.trash(input, options)\n}\n\nglobal.wait = async (time: number) =>\n  new Promise(res => setTimeout(res, time))\n\nglobal.checkProcess = (pid: string | number) => {\n  let { stdout, stderr } = exec(`kill -0 ` + pid)\n  //if running, stdout has text. If not, stdout is an empty string\n  return stdout\n}\n\nglobal.home = (...pathParts) => {\n  let path = require(\"path\")\n  let os = require(\"os\")\n  return path.resolve(os.homedir(), ...pathParts)\n}\n\nglobal.isFile = async file => test(\"-f\", file)\n\nglobal.isDir = async dir => test(\"-d\", dir)\n\nglobal.isBin = async bin =>\n  Boolean(\n    exec(`command -v ${bin}`, {\n      silent: false,\n    }).stdout\n  )\n\n// TODO: Strip out minimist\nglobal.args = []\n\nglobal.env = async (\n  envKey,\n  promptConfig = { placeholder: \"\" }\n) => {\n  if (global.env[envKey]) return global.env[envKey]\n\n  let input = await global.kitPrompt({\n    placeholder: `Set ${envKey} env to:`,\n    ...promptConfig,\n  })\n\n  if (input.startsWith(\"~\"))\n    input = input.replace(\"~\", global.env.HOME)\n\n  await global.cli(\"set-env-var\", envKey, input)\n  global.env[envKey] = input\n  return input\n}\n\nassignPropsTo(process.env, global.env)\n\nglobal.env.KIT_BIN_FILE_PATH = process.argv[1]\nglobal.env.KIT_SRC_NAME = process.argv[1]\n  .split(global.env.KENV.split(global.path.sep).pop())\n  .pop()\n\nglobal.env.KIT_SCRIPT_NAME = global.env.KIT_SRC_NAME.replace(\n  \".js\",\n  \"\"\n)\n\nglobal.kitPath = (...parts) =>\n  global.path.join(global.env.KIT, ...parts)\n\nglobal.kenvPath = (...parts: string[]) => {\n  return global.path.join(\n    global.env.KENV,\n    ...parts.filter(Boolean)\n  )\n}\n\nglobal.libPath = (...parts) =>\n  global.path.join(global.kenvPath(\"lib\"), ...parts)\n\nglobal.kitScriptFromPath = path => {\n  path = path.replace(global.kenvPath() + \"/\", \"\")\n  path = path.replace(/\\.js$/, \"\")\n  return path\n}\n\nglobal.kitFromPath = path => {\n  path = path.replace(global.env.KIT + \"/\", \"\")\n  path = path.replace(/\\.js$/, \"\")\n  return path\n}\n\nglobal.kitScript = global.kitScriptFromPath(\n  global.env.KIT_SCRIPT_NAME\n)\n\nglobal.db = (key: any, defaults: any) => {\n  let low = require(\"lowdb\")\n  let FileSync = require(\"lowdb/adapters/FileSync\")\n  let _db = low(\n    new FileSync(global.kenvPath(\"db\", `${key}.json`))\n  )\n\n  _db._.mixin(require(\"lodash-id\"))\n  _db.defaults(defaults).write()\n\n  return _db\n}\n", "//cjs is required to load/assign the content of this script synchronously\n//we may be able to convert this to .js if an \"--import\" flag is added\n//https://github.com/nodejs/node/issues/35103\n\nglobal.attemptImport = async (path, ..._args) => {\n  global.updateArgs(_args)\n  try {\n    //import caches loaded scripts, so we cache-bust with a uuid in case we want to load a script twice\n    //must use `import` for ESM\n    return await import(path + `?uuid=${global.uuid()}`)\n  } catch (error) {\n    console.warn(error.message)\n    global.setPlaceholder(error.message)\n\n    await global.wait(1000)\n    try {\n      let stackWithoutId = error.stack.replace(\n        /\\?[^:]*/,\n        \"\"\n      )\n      console.warn(stackWithoutId)\n      let errorFile = stackWithoutId\n        .split(\"\\n\")[1]\n        .replace(\"at file://\", \"\")\n        .replace(/:.*/, \"\")\n        .trim()\n\n      let [, line, col] = stackWithoutId\n        .split(\"\\n\")[1]\n        .replace(\"at file://\", \"\")\n        .split(\":\")\n      console.log({ line, col })\n      if (errorFile.includes(global.kenvPath())) {\n        global.edit(errorFile, global.kenvPath(), line, col)\n      }\n    } catch {}\n\n    await global.wait(2000)\n    exit(1)\n  }\n}\n\nglobal.runSub = async (scriptPath, ...runArgs) => {\n  return new Promise(async (res, rej) => {\n    let values = []\n    if (!scriptPath.includes(\"/\")) {\n      scriptPath = global.kenvPath(\"scripts\", scriptPath)\n    }\n    if (!scriptPath.startsWith(global.path.sep)) {\n      scriptPath = global.kenvPath(scriptPath)\n    }\n\n    if (!scriptPath.endsWith(\".js\"))\n      scriptPath = scriptPath + \".js\"\n\n    // console.log({ scriptPath, args, argOpts, runArgs })\n    let scriptArgs = [\n      ...global.args,\n      ...runArgs,\n      ...global.argOpts,\n    ].filter(arg => {\n      if (typeof arg === \"string\") return arg.length > 0\n\n      return arg\n    })\n    let child = fork(scriptPath, scriptArgs, {\n      stdio: \"inherit\",\n      execArgv: [\n        \"--require\",\n        \"dotenv/config\",\n        \"--require\",\n        global.kitPath(\"preload/api.js\"),\n        \"--require\",\n        global.kitPath(\"preload/kit.js\"),\n        \"--require\",\n        global.kitPath(\"preload/mac.js\"),\n      ],\n      //Manually set node. Shouldn't have to worry about PATH\n      execPath: global.env.KIT_NODE,\n      env: {\n        ...global.env,\n        KIT_PARENT_NAME:\n          global.env.KIT_PARENT_NAME ||\n          global.env.KIT_SCRIPT_NAME,\n        KIT_ARGS:\n          global.env.KIT_ARGS || scriptArgs.join(\".\"),\n      },\n    })\n\n    let name = process.argv[1].replace(\n      global.kenvPath() + global.path.sep,\n      \"\"\n    )\n    let childName = scriptPath.replace(\n      global.kenvPath() + global.path.sep,\n      \"\"\n    )\n\n    console.log(childName, child.pid)\n\n    let forwardToChild = message => {\n      console.log(name, \"->\", childName)\n      child.send(message)\n    }\n    process.on(\"message\", forwardToChild)\n\n    child.on(\"message\", (message: any) => {\n      console.log(name, \"<-\", childName)\n      global.send(message)\n      values.push(message)\n    })\n\n    child.on(\"error\", error => {\n      console.warn(error)\n      values.push(error)\n      rej(values)\n    })\n\n    child.on(\"close\", code => {\n      process.off(\"message\", forwardToChild)\n      res(values)\n    })\n  })\n}\n\nprocess.on(\"uncaughtException\", async err => {\n  console.warn(`UNCAUGHT EXCEPTION: ${err}`)\n  exit()\n})\n\nglobal.send = async (channel, data) => {\n  if (process?.send) {\n    process.send({\n      kitScript: global.kitScript,\n      channel,\n      ...data,\n    })\n  } else {\n    // console.log(from, ...args)\n  }\n}\n\nif (process?.send) {\n  let _consoleLog = console.log.bind(console)\n  let _consoleWarn = console.warn.bind(console)\n  console.log = async (...args) => {\n    global.send(\"CONSOLE_LOG\", {\n      log: args\n        .map(a =>\n          typeof a != \"string\" ? JSON.stringify(a) : a\n        )\n        .join(\" \"),\n    })\n  }\n\n  console.warn = async (...args) => {\n    global.send(\"CONSOLE_WARN\", {\n      warn: args\n        .map(a =>\n          typeof a != \"string\" ? JSON.stringify(a) : a\n        )\n        .join(\" \"),\n    })\n  }\n}\n\nglobal.show = (html, options) => {\n  global.send(\"SHOW\", { options, html })\n}\n\nglobal.showImage = (image, options) => {\n  global.send(\"SHOW_IMAGE\", {\n    options,\n    image:\n      typeof image === \"string\" ? { src: image } : image,\n  })\n}\n\nglobal.setPlaceholder = text => {\n  global.send(\"SET_PLACEHOLDER\", {\n    text,\n  })\n}\n\nglobal.run = async (name, ..._args) => {\n  global.onTabs = []\n  global.kitScript = name\n  global.send(\"RUN_SCRIPT\", {\n    name,\n    args: _args,\n  })\n  // setPlaceholder(`>_ ${kitScript}...`)\n  let kitScriptPath =\n    global.kenvPath(\"scripts\", global.kitScript) + \".js\"\n\n  return global.attemptImport(kitScriptPath, ..._args)\n}\n\nglobal.kit = async (scriptPath, ..._args) => {\n  let kitScriptPath =\n    global.kitPath(\"lib\", scriptPath) + \".js\"\n  return await global.attemptImport(kitScriptPath, ..._args)\n}\n\nglobal.main = async (scriptPath, ..._args) => {\n  let kitScriptPath =\n    global.kitPath(\"main\", scriptPath) + \".js\"\n  return await global.attemptImport(kitScriptPath, ..._args)\n}\n\nglobal.lib = async (scriptPath, ..._args) => {\n  let kitScriptPath = global.libPath(scriptPath) + \".js\"\n  return await global.attemptImport(kitScriptPath, ..._args)\n}\n\nglobal.cli = async (cliPath, ..._args) => {\n  let cliScriptPath =\n    global.kitPath(\"cli/\" + cliPath) + \".js\"\n  return await global.attemptImport(cliScriptPath, ..._args)\n}\n\nglobal.setup = async (setupPath, ..._args) => {\n  global.setPlaceholder(`>_ setup: ${setupPath}...`)\n  let setupScriptPath =\n    global.kitPath(\"setup/\" + setupPath) + \".js\"\n  return await global.attemptImport(\n    setupScriptPath,\n    ..._args\n  )\n}\n\nglobal.kitLib = async lib => {\n  return await global.kit(`kit/${lib}`)\n}\n\nglobal.tmp = file => {\n  let scriptTmpDir = global.kenvPath(\n    \"tmp\",\n    global.kitScript\n  )\n  mkdir(\"-p\", scriptTmpDir)\n  return global.kenvPath(\"tmp\", global.kitScript, file)\n}\nglobal.inspect = async (data, extension) => {\n  let dashedDate = () =>\n    new Date()\n      .toISOString()\n      .replace(\"T\", \"-\")\n      .replace(/:/g, \"-\")\n      .split(\".\")[0]\n\n  let tmpFilePath = global.kenvPath(\"tmp\", global.kitScript)\n  let formattedData = data\n  let tmpFullPath = global.path.join(\n    tmpFilePath,\n    `${dashedDate()}.txt`\n  )\n  if (typeof data === \"object\") {\n    formattedData = JSON.stringify(data, null, \"\\t\")\n    tmpFullPath = global.path.join(\n      tmpFilePath,\n      `${dashedDate()}.json`\n    )\n  }\n\n  if (extension) {\n    tmpFullPath = global.path.join(\n      tmpFilePath,\n      `${dashedDate()}.${extension}`\n    )\n  }\n\n  mkdir(\"-p\", tmpFilePath)\n  await writeFile(tmpFullPath, formattedData)\n\n  await global.edit(tmpFullPath)\n}\n\nglobal.compileTemplate = async (template, vars) => {\n  let templateContent = await readFile(\n    global.kenvPath(\"templates\", template),\n    \"utf8\"\n  )\n  let templateCompiler = compile(templateContent)\n  return templateCompiler(vars)\n}\n\nglobal.currentOnTab = null\nglobal.onTabs = []\nglobal.onTab = async (name, fn) => {\n  global.onTabs.push({ name, fn })\n  if (global.arg.tab) {\n    if (global.arg.tab === name) {\n      global.send(\"SET_TAB_INDEX\", {\n        tabIndex: global.onTabs.length - 1,\n      })\n      global.currentOnTab = await fn()\n    }\n  } else if (global.onTabs.length === 1) {\n    global.send(\"SET_TAB_INDEX\", { tabIndex: 0 })\n    global.currentOnTab = await fn()\n  }\n}\n\nglobal.kitPrevChoices = []\nglobal.setChoices = async choices => {\n  if (typeof choices === \"object\") {\n    choices = choices.map(choice => {\n      if (typeof choice === \"string\") {\n        return {\n          name: choice,\n          value: choice,\n          id: global.uuid(),\n        }\n      }\n\n      if (typeof choice === \"object\") {\n        if (!choice?.id) {\n          choice.id = global.uuid()\n        }\n      }\n\n      return choice\n    })\n  }\n\n  global.send(\"SET_CHOICES\", { choices })\n  global.kitPrevChoices = choices\n}\n\nglobal.md = markdown => require(\"marked\")(markdown)\n", "global.applescript = async (\n  script,\n  options = { silent: true }\n) => {\n  let formattedScript = script.replace(/'/g, \"'\\\"'\\\"'\")\n  if (global.env?.DEBUG) {\n    await writeFile(\n      global.kenvPath(\"tmp\", \"_debug.applescript\"),\n      script\n    )\n  }\n\n  let { stdout, stderr } = exec(\n    `osascript -e '${formattedScript}'`,\n    options\n  )\n\n  if (stderr) {\n    console.log(stderr)\n    exit()\n  }\n\n  return stdout.trim()\n}\n\nglobal.terminal = async script => {\n  let formattedScript = script.replace(/'|\"/g, '\\\\\"')\n\n  let command = `tell application \"Terminal\"\n  do script \"${formattedScript}\"\n  activate\n  end tell\n  `\n\n  return await global.applescript(command)\n}\n\nglobal.iterm = async command => {\n  command = `\"${command.replace(/\"/g, '\\\\\"')}\"`\n  let script = `\n    tell application \"iTerm\"\n        if application \"iTerm\" is running then\n            try\n                tell the first window to create tab with default profile\n            on error\n                create window with default profile\n            end try\n        end if\n    \n        delay 0.1\n    \n        tell the first window to tell current session to write text ${command}\n        activate\n    end tell\n    `.trim()\n  return await global.applescript(script)\n}\n\nlet terminalEditor = editor => async file => {\n  //TODO: Hyper? Other terminals?\n  let supportedTerminalMap = {\n    terminal: global.terminal,\n    iterm: global.iterm,\n  }\n\n  let { fileSearch } = await global.kit(\"file\")\n  let possibleTerminals = () =>\n    Object.entries(supportedTerminalMap)\n      .filter(async ([name, value]) => {\n        return fileSearch(name, {\n          onlyin: \"/\",\n          kind: \"application\",\n        })\n      })\n      .map(([name, value]) => ({ name, value: name }))\n\n  let KIT_TERMINAL = await global.env(\"KIT_TERMINAL\", {\n    placeholder: `Which Terminal do you use with ${editor}?`,\n    choices: possibleTerminals(),\n  })\n\n  return supportedTerminalMap[KIT_TERMINAL](\n    `${editor} ${file}`\n  )\n}\n\nglobal.edit = async (file, dir, line = 0, col = 0) => {\n  if (global.arg?.edit === false) return\n\n  let possibleEditors = () =>\n    [\n      \"atom\",\n      \"code\",\n      \"emacs\",\n      \"nano\",\n      \"ne\",\n      \"nvim\",\n      \"sublime\",\n      \"webstorm\",\n      \"vim\",\n    ]\n      .filter(\n        editor =>\n          exec(\n            `PATH=\"/usr/bin:/usr/local/bin\" which ${editor}`,\n            { silent: true }\n          ).stdout\n      )\n      .map(name => ({ name, value: name }))\n\n  let KIT_EDITOR = await global.env(\"KIT_EDITOR\", {\n    placeholder:\n      \"Which code editor do you use? (You can always change this later in .env)\",\n    choices: [\n      ...possibleEditors(),\n      {\n        name: \"None. Always copy path to clipboard\",\n        value: \"copy\",\n      },\n    ],\n  })\n\n  let code = async (file, dir, line = 0, col = 0) => {\n    let codeArgs = [\"--goto\", `${file}:${line}:${col}`]\n    if (dir) codeArgs = [...codeArgs, \"--folder-uri\", dir]\n    let command = `code ${codeArgs.join(\" \")}`\n    exec(command, {\n      env: {\n        ...process.env,\n        PATH: `/usr/local/bin:usr/bin:${process.env.PATH}`,\n      },\n    })\n  }\n\n  let vim = terminalEditor(\"vim\")\n  let nvim = terminalEditor(\"nvim\")\n  let nano = terminalEditor(\"nano\")\n  let fullySupportedEditors = { code, vim, nvim, nano }\n\n  let execEditor = (file: string) =>\n    exec(`${KIT_EDITOR} ${file}`, {\n      env: {\n        ...process.env,\n        PATH: `/usr/local/bin:usr/bin:${process.env.PATH}`,\n      },\n    })\n  let editorFn =\n    fullySupportedEditors[KIT_EDITOR] || execEditor\n  global.setPlaceholder(\n    `Opening ${file} with ${global.env.KIT_EDITOR}`\n  )\n\n  let result = await editorFn(file, dir, line, col)\n\n  if (result?.stderr) {\n    console.warn(`STDERR ${result.stderr}`)\n    exit()\n  }\n\n  console.log(\n    global.chalk`> Opening {yellow ${file}} with {green.bold ${global.env.KIT_EDITOR}}`\n  )\n}\n", "export enum MODE {\n  GENERATE = \"GENERATE\",\n  FILTER = \"FILTER\",\n  MANUAL = \"MANUAL\",\n  HOTKEY = \"HOTKEY\",\n}\n\nexport enum CHANNELS {\n  GENERATE_CHOICES = \"GENERATE_CHOICES\",\n  TAB_CHANGED = \"TAB_CHANGED\",\n  VALUE_SUBMITTED = \"VALUE_SUBMITTED\",\n}\n", "import { MODE, CHANNELS } from \"../../enums\"\nimport { assignPropsTo } from \"../utils\"\n\nlet displayChoices = (choices: Choice<any>[]) => {\n  switch (typeof choices) {\n    case \"string\":\n      global.setPanel(choices)\n      break\n\n    case \"object\":\n      global.setChoices(choices)\n      break\n  }\n}\n\nglobal.kitPrompt = async (config: PromptConfig) => {\n  let {\n    placeholder = \"\",\n    validate = null,\n    choices = [],\n    secret = false,\n    hint = \"\",\n    input = \"\",\n    drop = false,\n    ignoreBlur = false,\n    mode = MODE.FILTER,\n  } = config\n\n  global.setMode(mode)\n\n  let scriptInfo = await global.cli(\n    \"info\",\n    global.kitScript\n  )\n\n  global.send(\"SHOW_PROMPT\", {\n    tabs: global.onTabs?.length\n      ? global.onTabs.map(({ name }) => name)\n      : [],\n    tabIndex: global.onTabs?.findIndex(\n      ({ name }) => global.arg?.tab\n    ),\n    scriptInfo,\n    placeholder,\n    kitScript: global.kitScript,\n    parentScript: global.env.KIT_PARENT_NAME,\n    kitArgs: global.args.join(\" \"),\n    secret,\n    drop,\n  })\n\n  global.setHint(hint)\n  if (input) global.setInput(input)\n  if (ignoreBlur) global.setIgnoreBlur(true)\n\n  let generateChoices: GenerateChoices = null\n\n  //function, with \"input\"\n  if (\n    typeof choices === \"function\" &&\n    choices?.length > 0\n  ) {\n    global.setMode(MODE.GENERATE)\n    generateChoices = choices as GenerateChoices\n  }\n\n  if (generateChoices) {\n    displayChoices(await generateChoices(\"\"))\n    //function, no argument\n  } else if (\n    typeof choices === \"function\" &&\n    choices?.length === 0\n  ) {\n    displayChoices(await (choices as () => any)())\n    //array\n  } else {\n    displayChoices(choices as any)\n  }\n\n  let messageHandler: (data: any) => void\n  let errorHandler: () => void\n\n  let value = await new Promise((resolve, reject) => {\n    messageHandler = async data => {\n      switch (data?.channel) {\n        case CHANNELS.GENERATE_CHOICES:\n          if (generateChoices) {\n            displayChoices(\n              await generateChoices(data?.input)\n            )\n          }\n          break\n\n        case CHANNELS.TAB_CHANGED:\n          if (data?.tab && global.onTabs) {\n            process.off(\"message\", messageHandler)\n            process.off(\"error\", errorHandler)\n            let tabIndex = global.onTabs.findIndex(\n              ({ name }) => {\n                return name == data?.tab\n              }\n            )\n\n            global.currentOnTab = global.onTabs[\n              tabIndex\n            ].fn(data?.input)\n          }\n          break\n\n        case CHANNELS.VALUE_SUBMITTED:\n          let { value } = data\n          if (validate) {\n            let validateMessage = await validate(value)\n\n            if (typeof validateMessage === \"string\") {\n              global.setPlaceholder(validateMessage)\n              global.setChoices(global.kitPrevChoices)\n\n              return\n            }\n          }\n          resolve(value)\n          break\n      }\n    }\n\n    errorHandler = () => {\n      reject()\n    }\n\n    process.on(\"message\", messageHandler)\n    process.on(\"error\", errorHandler)\n  })\n\n  process.off(\"message\", messageHandler)\n  process.off(\"error\", errorHandler)\n\n  return value\n}\n\nglobal.drop = async (hint = \"\") => {\n  return await global.kitPrompt({\n    placeholder: \"Waiting for drop...\",\n    hint,\n    drop: true,\n    ignoreBlur: true,\n  })\n}\n\nglobal.hotkey = async (placeholder = \"Type anything:\") => {\n  return await global.kitPrompt({\n    placeholder,\n    mode: MODE.HOTKEY,\n  })\n}\n\nglobal.arg = async (placeholderOrConfig, choices) => {\n  let firstArg = global.args.length\n    ? global.args.shift()\n    : null\n  let placeholderOrValidateMessage = \"\"\n  if (firstArg) {\n    let valid = true\n    if (\n      typeof placeholderOrConfig !== \"string\" &&\n      placeholderOrConfig?.validate\n    ) {\n      let { validate } = placeholderOrConfig\n      let validOrMessage = await validate(firstArg)\n      valid =\n        typeof validOrMessage === \"boolean\" &&\n        validOrMessage\n\n      if (typeof validOrMessage === \"string\")\n        placeholderOrValidateMessage = validOrMessage\n    }\n\n    if (valid) {\n      return firstArg\n    }\n  }\n\n  if (typeof placeholderOrConfig === \"undefined\") {\n    return await global.kitPrompt({\n      placeholder: placeholderOrValidateMessage,\n    })\n  }\n\n  if (typeof placeholderOrConfig === \"string\") {\n    return await global.kitPrompt({\n      placeholder: placeholderOrConfig,\n      choices,\n    })\n  }\n\n  return await global.kitPrompt({\n    choices,\n    ...placeholderOrConfig,\n  })\n}\n\nglobal.updateArgs = arrayOfArgs => {\n  let argv = require(\"minimist\")(arrayOfArgs)\n  global.args = [...global.args, ...argv._]\n  global.argOpts = Object.entries(argv)\n    .filter(([key]) => key != \"_\")\n    .flatMap(([key, value]) => {\n      if (typeof value === \"boolean\") {\n        if (value) return [`--${key}`]\n        if (!value) return [`--no-${key}`]\n      }\n      return [`--${key}`, value]\n    })\n\n  assignPropsTo(argv, global.arg)\n}\nglobal.updateArgs(process.argv.slice(2))\n\nglobal.npm = async packageName => {\n  try {\n    return require(packageName)\n  } catch {\n    if (!global.arg?.trust) {\n      let placeholder = `${packageName} is required for this script`\n\n      let downloadsMessage = `${packageName} has had ${\n        (\n          await get(\n            `https://api.npmjs.org/downloads/point/last-week/` +\n              packageName\n          )\n        ).data.downloads\n      } downloads from npm in the past week`\n\n      let packageLink = `https://npmjs.com/package/${packageName}`\n\n      let trust = await global.arg(\n        { placeholder, hint: downloadsMessage },\n        [\n          {\n            name: `Abort`,\n            value: \"false\",\n          },\n          {\n            name: `Install ${packageName}`,\n            value: \"true\",\n          },\n          {\n            name: `Visit ${packageLink}}`,\n            value: \"visit\",\n          },\n        ]\n      )\n      if (trust === \"visit\") {\n        exec(`open ${packageLink}`)\n        exit()\n      }\n\n      if (trust === \"false\") {\n        echo(`Ok. Exiting...`)\n        exit()\n      }\n    }\n\n    setHint(`Installing ${packageName}...`)\n\n    await global.cli(\"install\", packageName)\n    let packageJson = require(global.kenvPath(\n      \"node_modules\",\n      packageName,\n      \"package.json\"\n    ))\n\n    setHint(\"\")\n\n    return require(global.kenvPath(\n      \"node_modules\",\n      packageName,\n      packageJson.main\n    ))\n  }\n}\n\nglobal.setPanel = async html => {\n  global.send(\"SET_PANEL\", { html })\n}\n\nglobal.setMode = async mode => {\n  global.send(\"SET_MODE\", {\n    mode,\n  })\n}\n\nglobal.setHint = async hint => {\n  global.send(\"SET_HINT\", {\n    hint,\n  })\n}\n\nglobal.setInput = async input => {\n  global.send(\"SET_INPUT\", {\n    input,\n  })\n}\n\nglobal.setIgnoreBlur = async ignore => {\n  global.send(\"SET_IGNORE_BLUR\", { ignore })\n}\n\nglobal.sendResponse = async value => {\n  global.send(\"SEND_RESPONSE\", {\n    value,\n  })\n}\n"],
  "mappings": "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",
  "names": []
}
